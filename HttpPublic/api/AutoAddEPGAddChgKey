dofile(mg.document_root..'\\api\\util.lua')

post=ReadPost()

AssertCsrf(post)

aa={}
lastRecSetting=nil
aa.dataID=tonumber(mg.get_var(mg.request_info.query_string, 'id')) or 0
if aa.dataID~=0 then
  for i,v in ipairs(edcb.EnumAutoAdd()) do
    if v.dataID==aa.dataID then
      lastRecSetting={}
      break
    end
  end
end
modified=false
if post and (aa.dataID==0 or lastRecSetting) then
  presetID=tonumber(mg.get_var(post, 'presetID'))
  recMode=tonumber(mg.get_var(post, 'recMode'))
  tuijyuuFlag=tonumber(mg.get_var(post, 'tuijyuuFlag')) or 0
  priority=tonumber(mg.get_var(post, 'priority'))
  pittariFlag=tonumber(mg.get_var(post, 'pittariFlag')) or 0
  suspendMode=tonumber(mg.get_var(post, 'suspendMode'))
  rebootFlag=mg.get_var(post, 'rebootFlag')
  useDefMarginFlag=mg.get_var(post, 'useDefMarginFlag')
  startMargin=tonumber(mg.get_var(post, 'startMargin'))
  endMargin=tonumber(mg.get_var(post, 'endMargin'))
  serviceMode=mg.get_var(post, 'serviceMode')
  serviceMode_1=mg.get_var(post, 'serviceMode_1')
  serviceMode_2=mg.get_var(post, 'serviceMode_2')
  continueRecFlag=mg.get_var(post, 'continueRecFlag')
  tunerID=tonumber(mg.get_var(post, 'tunerID'))
  partialRecFlag=mg.get_var(post, 'partialRecFlag')
  if presetID and
     recMode and
     priority and
     suspendMode and
     (useDefMarginFlag or startMargin and endMargin) and tunerID
  then
    aa.recSetting=lastRecSetting or {}
    rs=aa.recSetting
    rs.recMode=recMode
    rs.tuijyuuFlag=tuijyuuFlag~=0
    rs.priority=priority
    rs.pittariFlag=pittariFlag~=0
    rs.suspendMode=suspendMode
    rs.rebootFlag=rebootFlag~=nil
    rs.startMargin=nil
    rs.endMargin=nil
    if not useDefMarginFlag then
      rs.startMargin=startMargin
      rs.endMargin=endMargin
    end
    rs.serviceMode=serviceMode and 0 or 1+(serviceMode_1 and 16 or 0)+(serviceMode_2 and 32 or 0)
    rs.continueRecFlag=continueRecFlag~=nil
    rs.tunerID=tunerID
    rs.partialRecFlag=partialRecFlag and 1 or 0
    rs.batFilePath=mg.get_var(post, 'batFilePath')
    rs.recFolderList={}
    for i=0,10000 do
     if not mg.get_var(post, 'recFolder', i) then break end
      table.insert(rs.recFolderList, {
        recFolder=mg.get_var(post, 'recFolder', i),
        writePlugIn=mg.get_var(post, 'writePlugIn', i),
        recNamePlugIn=mg.get_var(post, 'recNamePlugIn', i) and mg.get_var(post, 'recNamePlugIn', i)..(mg.get_var(post, 'recName', i) and #mg.get_var(post, 'recName', i)>0 and '?'..mg.get_var(post, 'recName', i) or '') or ''
      } )
    end
    rs.partialRecFolder={}
    for i=0,10000 do
     if not mg.get_var(post, 'partialrecFolder', i) then break end
      table.insert(rs.partialRecFolder, {
        recFolder=mg.get_var(post, 'partialrecFolder', i),
        writePlugIn=mg.get_var(post, 'partialwritePlugIn', i),
        recNamePlugIn=mg.get_var(post, 'partialrecNamePlugIn', i)..(mg.get_var(post, 'partialrecName', i) and #mg.get_var(post, 'partialrecName', i)>0 and '?'..mg.get_var(post, 'partialrecName', i) or '') or ''
      } )
    end

    aa.searchInfo={}
    si=aa.searchInfo
    si.andKey=(mg.get_var(post, 'disableFlag') and '^!{999}' or '')..(mg.get_var(post, 'andKey') or '')
    si.notKey=mg.get_var(post, 'notKey') or ''
    si.regExpFlag=(tonumber(mg.get_var(post, 'regExpFlag')) or 0)~=0
    si.titleOnlyFlag=(tonumber(mg.get_var(post, 'titleOnlyFlag')) or 0)~=0
    si.aimaiFlag=(tonumber(mg.get_var(post, 'aimaiFlag')) or 0)~=0
    si.notContetFlag=(tonumber(mg.get_var(post, 'notContetFlag')) or 0)~=0
    si.notDateFlag=(tonumber(mg.get_var(post, 'notDateFlag')) or 0)~=0
    si.freeCAFlag=tonumber(mg.get_var(post, 'freeCAFlag')) or 0
    si.chkRecEnd=(tonumber(mg.get_var(post, 'chkRecEnd')) or 0)~=0
    si.chkRecDay=tonumber(mg.get_var(post, 'chkRecDay')) or 0
    si.chkRecNoService=(tonumber(mg.get_var(post, 'chkRecNoService')) or 0)~=0
    si.chkDurationMin=tonumber(mg.get_var(post, 'chkDurationMin')) or 0
    si.chkDurationMax=tonumber(mg.get_var(post, 'chkDurationMax')) or 0
    si.contentList={}
    for i=0,10000 do
      v=mg.get_var(post, 'contentList', i)
      if not v then break end
      table.insert(si.contentList, {content_nibble=tonumber(v) or 0})
    end
    si.serviceList={}
    for i=0,10000 do
      v=mg.get_var(post, 'serviceList', i)
      if not v then break end
      m={string.match(v, '^(%d+)%-(%d+)%-(%d+)$')}
      if #m==3 then
        table.insert(si.serviceList, {onid=0+m[1], tsid=0+m[2], sid=0+m[3]})
      end
    end
    si.dateList={}
    for v in string.gmatch(mg.get_var(post, 'dateList') or '', '[^,]+') do
      m={string.match(v, '^(.-)%-(%d+):(%d+)%-(.-)%-(%d+):(%d+)$')}
      if #m==6 then
        dateInfo={
          startDayOfWeek=({['日']=0,['月']=1,['火']=2,['水']=3,['木']=4,['金']=5,['土']=6})[m[1]],
          endDayOfWeek=({['日']=0,['月']=1,['火']=2,['水']=3,['木']=4,['金']=5,['土']=6})[m[4]]
        }
        if dateInfo.startDayOfWeek and dateInfo.endDayOfWeek then
          dateInfo.startHour=0+m[2]
          dateInfo.startMin=0+m[3]
          dateInfo.endHour=0+m[5]
          dateInfo.endMin=0+m[6]
          table.insert(si.dateList, dateInfo)
        end
      end
    end
    modified=edcb.AddOrChgAutoAdd(aa)
  end
end

ct='<?xml version="1.0" encoding="UTF-8" ?'..'><entry>'
  ..(modified and '<success>'..(aa.dataID==0 and 'EPG自動予約を追加しました' or 'EPG自動予約を変更しました')..'</success></entry>' or '<err>EPG自動予約を追加・変更できませんでした</err></entry>')
mg.write('HTTP/1.1 200 OK\r\nContent-Type: text/xml\r\nContent-Length: '..#ct..'\r\nConnection: close\r\n\r\n', ct)
