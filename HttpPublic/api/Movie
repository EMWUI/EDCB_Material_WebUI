status, lfs=pcall(require, 'lfs')
if status then
  CurrentDir=edcb.GetPrivateProfile('SET','ModulePath','','Common.ini')
  lfs.chdir (CurrentDir)
end

path='Setting\\HttpPublic.ini'
ffmpeg=edcb.GetPrivateProfile('SET','ffmpeg','Tools\\ffmpeg',path)
readex=edcb.GetPrivateProfile('SET','readex','Tools\\readex',path)

-- トランスコードするかどうか
XCODE=tonumber(mg.get_var(mg.request_info.query_string, 'xcode') and 0 or 1)~=0
-- 変換コマンド
quality=mg.get_var(mg.request_info.query_string, 'quality') or nil

if quality then
  XOPT=edcb.GetPrivateProfile('MOVIE',quality,'-vcodec libvpx -b 1800k -quality realtime -cpu-used 2 -vf yadif=0:-1:1  -s 960x540 -r 30000/1001 -acodec libvorbis -ab 128k -f webm -',path)
else
  XOPT=edcb.GetPrivateProfile('SET','ffmpegoption','-vcodec libvpx -b 896k -quality realtime -cpu-used 1 -vf yadif=0:-1:1 -s 512x288 -r 30000/1001 -acodec libvorbis -ab 128k -f webm -',path)
end
XCMD=ffmpeg..' -i pipe:0 '..XOPT
-- 変換後の拡張子
XEXT='.webm'
-- 転送開始前に変換しておく量(bytes)
XPREPARE=tonumber(edcb.GetPrivateProfile('SET','xprepare',48128,path))

fpath=mg.get_var(mg.request_info.query_string,'fname') or nil

-- ts以外を除外
if fpath and not (string.find(fpath, '%.ts$') or string.find(fpath, '%.mp4$') or string.find(fpath, '%.webm$')) then
   fpath=nil
end

r=edcb.GetRecFilePath((mg.get_var(mg.request_info.query_string,'reid') or 0))
v=edcb.GetRecFileInfo((mg.get_var(mg.request_info.query_string,'id') or 0))

if r then
  fpath=r
  if XCODE then
    -- トランスコード中のファイルがあればそっち使う
    f=edcb.io and edcb.io.open(fpath..XEXT, 'rb')
    if f then
      f:close()
      fpath=fpath..XEXT
      XCODE=false
    end
  end
elseif v then
  fpath=v.recFilePath
end

-- 転送開始位置(99分率)(容量確保録画には未対応)
offset=tonumber(mg.get_var(mg.request_info.query_string,'offset')) or 0

f=nil
if fpath then
  f=edcb.io.open(fpath, 'rb')
  if f then
    offset=math.floor((f:seek('end', 0) or 0) * offset / 99 / 188) * 188
    if XCODE then
      f:close()
      f=edcb.io.popen(readex..' '..offset..' 4 "'..fpath..'" | '..XCMD, 'rb')
      fname=string.match(fpath, '([^\\]+)%.[^%.]+$')..XEXT
    else
      f:seek('set', offset)
      fname=string.match(fpath, '[^\\]+$')
      XPREPARE=nil
    end
  end
end

if not f then
  mg.write('HTTP/1.1 404 Not Found\r\nConnection: close\r\n\r\n')
else
  mg.write('HTTP/1.1 200 OK\r\nContent-Type: '..mg.get_mime_type(fname)..'\r\nContent-Disposition: filename='..mg.url_encode(fname)..'\r\nConnection: close\r\n\r\n')
  retry=0
  while true do
    buf=f:read(XPREPARE or 48128)
    XPREPARE=nil
    if buf and #buf ~= 0 then
      retry=0
      if not mg.write(buf) then
        -- キャンセルされた
        mg.cry('canceled')
        break
      end
    else
      -- 終端に達した。4秒間この状態が続けば対象ファイルへの追記が終息したとみなす
      retry=retry+1
      if XCODE or retry > 20 then
        mg.cry('end')
        break
      end
      edcb.Sleep(200)
    end
  end
  f:close()
end